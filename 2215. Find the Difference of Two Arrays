// class Solution {
// public:

//      void remove(std::vector<int> &v)
// {
//     auto end = v.end();
//     for (auto it = v.begin(); it != end; ++it) {
//         end = std::remove(it + 1, end, *it);
//     }
 
//     v.erase(end, v.end());
// }
//     vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
//         map<int,int> mp1;
//         map<int,int>mp2;

//         vector<int> v1;
//         vector<int>v2;
//         for(int i  =0; i<nums1.size(); i++)
//         {
//            mp1[nums1[i]]++;
//         } 
        
//         for(int j  =0; j<nums2.size(); j++)
//         {
//            mp2[nums2[j]]++;
//         } 

//         for(int k =0; k<nums1.size(); k++)
//         {
//             if(mp2.find(nums1[k]) ==mp2.end())
//             {
//                v1.push_back(nums1[k]);
//             }
//         }
//         for(int l =0; l<nums2.size(); l++)
//         {
//             if(mp1.find(nums2[l]) ==mp1.end())
//             {
//                v2.push_back(nums2[l]);
//             }
//         }
//         vector<vector<int>>v;
//         remove(v1);
//         remove(v2);
//         v.push_back(v1);

//         v.push_back(v2);
//         return v;
//     }
// };
//---------------> sets--------->
class Solution {
public:
    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> set1(nums1.begin(), nums1.end());
        unordered_set<int> set2(nums2.begin(), nums2.end());
        
        vector<int> distinct_nums1, distinct_nums2;
        for (int num : set1) {
            if (set2.count(num) == 0) {
                distinct_nums1.push_back(num);
            }
        }

        for (int num : set2) {
            if (set1.count(num) == 0) {
                distinct_nums2.push_back(num);
            }
        }

        return {distinct_nums1, distinct_nums2};
    }
};
